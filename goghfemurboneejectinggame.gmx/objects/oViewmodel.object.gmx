<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Viewmodel handler object
// The position of viewmodel
// origin : screen bottom-center
modelx = 0;
modely = 0;
modelz = 0;

// how far viewmodel is away from the screen
viewmodelDist = 5;

// rotation
modelTilt   = 0;
modelSkew   = 0;
modelRot    = 0;

// scale
scale = 3;

// Viewmodels owner instance
owner = noone;
drawViewmodel = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animation FSM
fsm_init();
fsm_add_state("idle", state_viewmodel_idle);
fsm_add_state("interact", state_viewmodel_interact);
fsm_add_state("melee_windup", state_viewmodel_melee_windup);
fsm_add_state("melee_swing", state_viewmodel_melee_swing);
fsm_add_state("melee_delay", state_viewmodel_melee_delay);
fsm_add_state("move", state_viewmodel_move);
fsm_set_state("idle");

// Animation FX : sway intensitiy
animFXSwayIntensity = 1.0;

// Idle
animIdleX = 0;
animIdleY = -0.25;
animIdleRot = 0;
animIdleSkew = 45;

// Intract
animInteractTime = room_speed * 0.5;
animInteractY1 = -0.25;
animInteractY2 = -3.0;
animInteractSkew1 = animIdleSkew;
animInteractSkew2 = 70;

// Move
animMoveSkew = 70;
animMoveSkewAmp = 10;
animMoveTiltAmp = 10;
animMoveBobAmp = 1;

// Melee swing
animMeleeSwingX1 = 5;
animMeleeSwingX2 = -5;
animMeleeSwingY1 = 1;
animMeleeSwingY2 = -3;
animMeleeSwingR1 = -90;
animMeleeSwingR2 = 90;
animMeleeSwingSkew1 = 100;
animMeleeSwingSkew2 = 70;

// Melee windup
animMeleeWindupX1 = 0;
animMeleeWindupX2 = 5;
animMeleeWindupY1 = 0;
animMeleeWindupY2 = 2;
animMeleeWindupR1 = 0;
animMeleeWindupR2 = -90;
animMeleeWindupSkew1 = 80;
animMeleeWindupSkew2 = 110;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete FSM
fsm_destroy();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update animation FSM
if (global.gamePaused)
    exit;

fsm_update();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update weapon FX (sway, shake, etc...)

var _t = current_time * 0.0001;
modelx += cos(_t * 1.45 * pi + 3.120312) * 0.5 * animFXSwayIntensity;
modely += sin(_t * pi) * 0.5 * animFXSwayIntensity;
modelSkew += sin(_t * pi) * 5 * animFXSwayIntensity;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw viewmodel
if (drawViewmodel)
{
    var _winwid = window_get_width();
    var _winhei = window_get_height();
    
    // Setup the projection and 3D settings
    // (disable depth testing to viewmodel stays in front of everything)
    d3d_set_hidden(false);
    
    // (set projection)
    // d3d_set_projection_perspective(0, 0, window_get_width(), window_get_height(), 0);
    d3d_set_projection_ext(0, 0, 0, 0, 0, -1, 0, -1, 0, 90, _winwid / _winhei, 0.001, 100);
    
    // Draw the viewmodel
    // (for each sprites in the viewmodel sprite list, draw sprite)
    /*
    for (var i=0; i&lt;ds_list_size(viewmodelSprites); i++)
    {
        // (get the sprites information)
        var _sprite = viewmodelSprites[| i];
        
        // (set the transform matrix)
        d3d_transform_set_rotation_z(_sprite[@ 3]); // local rotation
        // d3d_transform_add_rotation_x(90); // local rotation
        d3d_transform_add_translation(_sprite[@ 0], _sprite[@ 1], _sprite[@ 2]); // local translation
        d3d_transform_add_rotation_z(r); // global rotation
        d3d_transform_add_translation(x, y, z + 4); // global translation
        draw_sprite_part_ext(sprTexture, 0, _sprite[@ 6], _sprite[@ 7], GFX_TILE_SIZE, GFX_TILE_SIZE, -GFX_TILE_SIZE * 0.5, -GFX_TILE_SIZE * 0.5, _sprite[@ 4], _sprite[@ 5], _sprite[@ 8], 1.0);
    }
    */
    
    // Apply weapon's local transformation
    with (owner.weapon)
    {
        event_user(0);
    }
    
    // Apply local transformatiom
    d3d_transform_add_rotation_z(modelRot); // apply top-down rotation
    d3d_transform_add_translation(modelx, modely, modelz);
    
    // Apply global transformation
    d3d_transform_add_rotation_x(-modelSkew); // skew it
    d3d_transform_add_rotation_z(modelTilt); // add global rotation / tilt
    d3d_transform_add_translation(0, viewmodelDist - owner.weapon.modelScale[@ 1] * 0.5, -viewmodelDist); // global translation : offset it to screen's bottom
    
    // Draw weapon model
    with (owner.weapon)
    {
        event_user(1);
    }
    
    // d3d_draw_floor(-0.5, -0.5, 0, 0.5, 0.5, 0, sprite_get_texture(sprTiles, weapon.spriteIdx), 1, 1);
    // draw_sprite(sprTiles, GFX_KNIFE_TILE_IDX, 0, 0);
    //draw_sprite_part_ext(sprTexture, 0, 0, 0, GFX_TILE_SIZE, GFX_TILE_SIZE, 0, 0, 1 / GFX_TILE_SIZE, 1 / GFX_TILE_SIZE, c_white, 1.0);
    
    // (reset the transform matrix)
    d3d_transform_set_identity();
    
    // d3d_draw_block(-2, -4, 4, 2, 2, 6, sprite_get_texture(sprTest, 0), 2, 2);
    
    // Revert the 3D settings
    // (re-enable depth testing)
    d3d_set_hidden(true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
