<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control object
fsm_init();
fsm_add_state("default", state_control_init, ui_draw_bootup);
fsm_add_state("intermission", state_control_intermission, ui_draw_intermission);
fsm_add_state("room_enter", state_control_room_enter, ui_draw_intermission);
fsm_add_state("room_enter_intermission", state_control_room_enter_intermission, ui_draw_intermission);
fsm_add_state("ingame", state_control_ingame, ui_draw_ingame);
fsm_add_state("pick_weapon", state_control_pick_weapon, ui_draw_pick_weapon);
fsm_add_state("paused", state_control_paused, ui_draw_paused);
fsm_set_state("default");

// Seed the randomizer
randomize();

// Set the font
draw_set_font(fntGame);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI : Generic / Global stuffs
// Bottom message
UIShowBottomMsg = false;
UIBottomMsg     = "";
UIBottomMsgScale = 1;

// Message
UIMessage = "PEPPERONI SECRET";
UIMessageTime = 0;
UIMessageFadeTime = room_speed * 0.5;
UIMessageScale = 3;

// Overlay : flash
UIFlashColour   = c_white;
UIFlashTime     = 0;
UIFlashTimeMax  = 0;

// Overlay : fill in
UIFillColour    = c_black;
UIFillAlpha     = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State : NORMAL
// Currently choosen player spawner index
roomPlayerSpawnIdx = 0;

// Ingame : score (rooms passed)
gameScore = 0;

global.gamePaused = true;

// Pick weapons : two weapon instances
weaponPickupInst = noone;
weaponOld = noone;
weaponNew = noone;

// Intermission : Show info
intermissionShowInfo = true;
intermissionMoved    = 0;
intermissionMovedReq = 8;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

// Shader
global.shaderDistortInstensity  = 0.05;
global.shaderDistortFrequency   = 10.0;
global.shaderTintInstensity     = 0.2;

// Screen effect
global.screenWidth = window_get_width();
global.screenHeight = window_get_height();
global.screenDownscaleFactor = 2;
global.surfGame = surface_create(window_get_width() &gt;&gt; global.screenDownscaleFactor, window_get_height() &gt;&gt; global.screenDownscaleFactor);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State transition
// Destination state
transitionDest          = "default";
transitionCtr           = 0;
transitionTime          = room_speed;
transitionInProgress    = false;    // currently in transition
transitionFadeOut       = false;    // is fading out to black?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update fade in/out
if (transitionInProgress)
{
    if (transitionFadeOut)
    {
        if (transitionCtr &gt; transitionTime)
        {
            // (set transition state to fadein)
            transitionFadeOut = false;
            transitionCtr = 0;
            
            // (move to destination state)
            fsm_set_state(transitionDest);
        }
        else
        {
            transitionCtr++;
        }
    }
    else
    {
        if (transitionCtr &gt; transitionTime)
        {
            // (finish fading in)
            transitionInProgress = false;
            transitionFadeOut = false;
            transitionCtr = 0;
        }
        else
        {
            transitionCtr++;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update UI message
if (UIMessageTime &gt; 0)
    UIMessageTime--;
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Screen flash
if (UIFlashTime &gt; 0)
    UIFlashTime--;
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update screen resolution

if (keyboard_check_pressed(vk_f1))
{
    window_set_fullscreen(!window_get_fullscreen());
}

if ((global.screenWidth != window_get_width() ||
    global.screenHeight != window_get_height()) &amp;&amp;
    window_get_width() != 0 &amp;&amp; window_get_height() != 0)
{
    global.screenWidth = window_get_width();
    global.screenHeight = window_get_height();
    
    if (surface_exists(global.surfGame))
        surface_free(global.surfGame);
    global.surfGame = surface_create(global.screenWidth &gt;&gt; global.screenDownscaleFactor, global.screenHeight &gt;&gt; global.screenDownscaleFactor);
    
    surface_resize(application_surface, global.screenWidth, global.screenHeight);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update screen surface
if (!surface_exists(global.surfGame))
{
    global.surfGame = surface_create(window_get_width() &gt;&gt; global.screenDownscaleFactor, window_get_height() &gt;&gt; global.screenDownscaleFactor);
}

// Clear
surface_set_target(global.surfGame);
draw_clear_alpha(0, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update game's control mechanic
fsm_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Summon important system objects
if (!instance_exists(oGamevars)) instance_create(0, 0, oGamevars);
if (!instance_exists(oRoom)) instance_create(0, 0, oRoom);
if (!instance_exists(oCamera)) instance_create(0, 0, oCamera);
if (!instance_exists(oRenderMan)) instance_create(0, 0, oRenderMan);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw game surface
surface_set_target(global.surfGame);
draw_clear_alpha(0, 0);
draw_surface_stretched(application_surface, 0, 0, surface_get_width(global.surfGame), surface_get_height(global.surfGame));
surface_reset_target();

draw_surface_stretched(global.surfGame, 0, 0, window_get_width(), window_get_height());

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI according to states
fsm_exec(1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI overlay

// Screen fill-ins
if (UIFillAlpha &gt; 0)
{
    draw_sprite_stretched_ext(sprTiles, 28, 0, 0, window_get_width(), window_get_height(), UIFillColour, UIFillAlpha);
}

// Transition fadein
if (transitionInProgress)
{
    var _interp = interp_weight(transitionCtr, transitionTime, 2.0, 1.0);
    var _alpha = 0.0;
    if (transitionFadeOut)
        _alpha = _interp;
    else
        _alpha = 1.0 - _interp;
        
    draw_sprite_stretched_ext(sprTiles, 0, 0, 0, window_get_width(), window_get_height(), c_black, _alpha);
}

// Screen flash
if (UIFlashTime &gt; 0)
{
    var _interp = interp_weight(UIFlashTime, UIFlashTimeMax, 2.0, 1.0);
    draw_sprite_stretched_ext(sprTiles, 28, 0, 0, window_get_width(), window_get_height(), UIFlashColour, _interp);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
