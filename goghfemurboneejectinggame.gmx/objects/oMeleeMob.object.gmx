<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mob melee attack
// Damage &amp; knockback
damage = 1;
knockback = 1;

// Frames since creation
duration = 0;

// Mask
mask_index = maskMelee;
sprite_index = sprWhoosh;

isInWall = false; // is melee in wall?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamePaused)
    exit;

// Increment duration
duration++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oStunZone">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swords collided with sword stun zone
if (other.owner != owner)
{
    // If the stun zone is deployed from other weapon, Then stun the weapon
    with (owner)
    {
        // Stun the weapon
        fsm_set_state("melee_stun");
    }
    
    // If stun zone's owner's owner is player, then flash the screen
    // And make the players weapon instantly re-hitable
    if (other.owner.owner.object_index == oPlayer)
    {
        ui_screen_flash(room_speed * 0.3, c_white);
        fsm_set_state("melee_idle");
    }
    
    // Play sfx : metal ting
    sfx_emit(sndMetalTing, 1.0, random_range(1.0, 1.2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeleePlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Two swords has clashed

// Compare which one has been created later
var _winner = noone;
var _loser = noone;
if (duration &lt; other.duration)
{
    // Enemy's sword has been deployed later; Enemy wins
    _winner = owner;
    _loser = other.owner;
}
else
{
    // Player's sword has been deployed later; Player wins
    _winner = other.owner;
    _loser = owner;
    
    // Flash the screen
    ui_screen_flash(room_speed * 0.2, c_yellow);
}

// Put winner to advantage by making them instantly ready to be deployed again
with (_winner)
{
    fsm_set_state("melee_idle");
}
// Put loser to disadvantage by making them wait a bit before deploying again
with (_loser)
{
    fsm_set_state("melee_delay");
}

// Also apply knockback to both of entity
var _dir = point_direction(_winner.owner.x, _winner.owner.y, _loser.owner.x, _loser.owner.y);
_loser.owner.vx += lengthdir_x(oGamevars.metaWeaponClashKnockback, _dir);
_loser.owner.vy += lengthdir_y(oGamevars.metaWeaponClashKnockback, _dir);
_winner.owner.vx -= lengthdir_x(oGamevars.metaWeaponClashKnockback, _dir);
_winner.owner.vy -= lengthdir_y(oGamevars.metaWeaponClashKnockback, _dir);

// Play sfx : metal ting
sfx_emit(sndMetalTing, 1.0, random_range(0.9, 1.0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 
d3d_transform_set_translation(0, 0, 2);
draw_sprite_ext(sprite_index, 0, x, y, image_xscale / GFX_TILE_SIZE, image_yscale / GFX_TILE_SIZE * 2.0, image_angle, c_red, image_alpha);
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
