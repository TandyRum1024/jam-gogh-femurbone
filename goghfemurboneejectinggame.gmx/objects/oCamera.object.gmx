<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera object
// FSM
fsm_init();
fsm_add_state("default", state_cam_default);
fsm_add_state("follow", state_cam_follow);
fsm_set_state("default");

// Physics
z = 4;

// Camera properties
lookH = 0;
lookV = 0;
lookRoll = 0;
lookRollTarget = 0;
lookRollLerpFactor = 0.25;
fov = 90;
aspect = window_get_width() / window_get_height();

// Vectors
// (forward : x++)
vecFx = 1;
vecFy = 0;
vecFz = 0;

// (right : y++)
vecRx = 0;
vecRy = 1;
vecRz = 0;

// (up : z--)
vecUx = 0;
vecUy = 0;
vecUz = 1;

// Camera effect
FXBobIntensity = 0;
FXBobAmplitude = 1;
FXBobFreq = 1;
FXBobCtr = 0;
FXBobOffset = 0; // z-offset

// Bobbing effect : footset sound
FXBobSoundPlayed    = false;
FXBobStepFlip       = 1;
FXBobStepVolume     = 0.5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties : Follow mode
followInst = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera's vector &amp; aspect ratio
// Restrict camera's vertical rotation
lookV = clamp(lookV, -20, 20);

// (precalculate sin/cos values)
var _hc = dcos(lookH);
var _hs = dsin(lookH);
var _vc = dcos(lookV);
var _vs = dsin(lookV);
var _rc = dcos(lookRoll);
var _rs = dsin(lookRoll);

// Update forward vector (=&gt; vector (-1, 0, 0) rotated on y-axis &amp; z-axis)
// (yaxis)
vecFx = _vc;
vecFy = 0;
vecFz = _vs;
// (zaxis)
var _temp = vecFx;
vecFx = _temp * -_hc;
vecFy = _temp * -_hs;

// Update right vector (=&gt; vector (0, -1, 0) rotated on z-axis)
vecRx = -_hs;
vecRy = _hc;
vecRz = 0;

// Update up vector (=&gt; vector (0, 0, 1) rotated on y-axis, z-axis)
// (x-axis)
vecUx = 0;
vecUy = -_rs;
vecUz = _rc;
// (y-axis)
vecUx = _vs * vecUz;
// vecUy = 0;
vecUz = _vc * vecUz;
// (z-axis)
var _tempx = vecUx;
var _tempy = vecUy;
vecUx = _tempx * -_hc - _tempy * _hs;
vecUy = _tempx * -_hs + _tempy * _hc;

// Update aspect ratio
aspect = window_get_width() / window_get_height();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera roll &amp; effect
// FX : Camera roll / tilt
lookRoll = lerp(lookRoll, lookRollTarget, lookRollLerpFactor);

// FX : Camera bob
var _bobosc = abs(sin(FXBobCtr * FXBobFreq));
FXBobOffset = _bobosc * FXBobAmplitude * FXBobIntensity;
if (_bobosc &lt; 0.1)
{
    // Play footstep sounds
    if (!FXBobSoundPlayed)
    {
        sfx_emit(choose(sndFootstep1, sndFootstep2), FXBobStepVolume + FXBobStepFlip * 0.1, random_range(0.9, 1.1));
        FXBobSoundPlayed = true;
        FXBobStepFlip = -FXBobStepFlip;
    }
}
else
{
    FXBobSoundPlayed = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera FSM
fsm_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End the 3D

// Reset the shader
shader_reset();

d3d_end();
draw_set_alpha_test(false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the 3D &amp; set camera
d3d_start();
d3d_set_culling(false);
d3d_set_hidden(true);
draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(128);
d3d_set_projection_ext(x, y, z + FXBobOffset, x + vecFx, y + vecFy, z + FXBobOffset * 0.95 + vecFz, vecUx, vecUy, vecUz, fov, aspect, 0.1, 64000);

// Set the shader
shader_set(shd_modeleffect);
// Set uniforms
shader_set_uniform_f(shader_get_uniform(shd_modeleffect, "uTime"), current_time * 0.001);
shader_set_uniform_f(shader_get_uniform(shd_modeleffect, "uDistortIntensity"), global.shaderDistortInstensity);
shader_set_uniform_f(shader_get_uniform(shd_modeleffect, "uDistortFrequency"), global.shaderDistortFrequency);
shader_set_uniform_f(shader_get_uniform(shd_modeleffect, "uTintIntensity"), global.shaderTintInstensity);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
