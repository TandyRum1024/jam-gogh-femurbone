<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game's useful various variables

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flavour text generation table
tblFlavourTextBegin = makearray("", "YOU MUST", "GO", "PLEASE", "JUST", "DON'T", "YES,");
tblFlavourTextWords = makearray("EMIT", "DELETE", "CONSUME", "DESTROY", "DESSICATE", "INTEGRATE", "DIFFERENTIATE", "PEPPERONI", "PAINT", "EINSTEIN", "BUTT", "HAMBURGER", "BACON", "BLIN", "TREE", "BOAT", "MAN", "TESLA", "LEGS");
// tblFlavourTextPrefix = makearray("", "DIGITAL", "EINSTEIN", "GOLDEN", "ELECTRIC", "ANALOGUE");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon properties

// Weapon type
enum eWEAPON
{
    MELEE = 0,
    RANGED,
    END,
    KEY // This way we can prevent key from generating in random weapon generator
}

enum eWEAPON_MELEE
{
    SWING = 0,
    END
}

enum eWEAPON_RANGED
{
    MANUAL = 0,
    AUTO,
    END
}

// Universal weapon data
metaWeaponDamageRange       = makearray(2, 8); // damage range
metaWeaponKnockbackRange    = makearray(0.5, 2.0); // knockback range

// Melee-specific data
metaWeaponMeleeSpeedRange   = makearray(5, room_speed); // swing speed range : larger means more frame to swing the weapon
metaWeaponMeleeWindupRange  = makearray(10, 20); // swing windup duration range : larger means more frames to wait before swinging the weapon
metaWeaponMeleeDelayRange   = makearray(0, 60); // swing delay range : larger means more frames to wait until next swing is available
metaWeaponMeleeDistRange    = makearray(4, 24); // swing distance range : larger means farther the swing can reach

// Ranged-specific data
metaWeaponRangedDelayRange  = makearray(0, room_speed * 0.5); // shoot delay range : lesser means lesser frames to wait until next shot becomes available
metaWeaponRangedRecoilRange = makearray(0.1, 1.0); // recoil range : knockback applied to player on shot
metaWeaponRangedDistRange   = makearray(16, 64); // attack distance range : travel distance of projectile before vanishing
metaWeaponRangedVelRange    = makearray(0.5, 3); // projectile velocity range : velocity of projectile
metaWeaponRangedShotsRange  = makearray(1, 12); // shots-per-fire range : number of shots fired per single shot, also distributes the damage

// Ranged : burst fire mutation chance
metaWeaponRangedMultishotChance = 0.2; // 20%

// Visuals
metaWeaponScaleRangeX = makearray(1, 2);
metaWeaponScaleRangeY = makearray(2, 4);

// Weapon clashing
metaWeaponClashKnockback = 0.5;

// FSM : Stunned
metaWeaponFSMStunDurationPlayer = room_speed; // duration of weapon stunned state frames (for palyer)
metaWeaponFSMStunDurationEnemy = room_speed * 2.0; // duration of weapon stunned state frames (for enemy)

// Visual : colour flash chance
metaWeaponVisualFlashChance = 0.2; // 20%

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player properties
metaPlayerHeight = 4;

// FSM : Hurt state
metaPlayerFSMHurtDuration = room_speed * 0.5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy properties
// Base stats
metaEnemyBaseHealthRange = makearray(4, 16);
metaEnemyBaseSpeedRange = makearray(0.25, 0.5);

// Multipliers
metaEnemyHealthMultiplierIncrement = 0.5;

// Weapon drop rate
metaEnemyWeaponDropChance = 0.2; // 20% chance of monsters dropping the weapons

// Visuals
metaEnemyGFXTileRange = makearray(GFX_ENEMY_TILE_IDX_1, GFX_ENEMY_TILE_IDX_2);

// FSM : Hurt state
metaEnemyFSMHurtDuration = room_speed * 0.5;

// FSM : Melee attack state
metaEnemyFSMMeleeSwingDuration = room_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SFX properties
sfx_init_settings();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Metadata : tile data
enum eTILE
{
    FLOOR = 0,
    WALL,
    CEILING,
    SPAWN_PLR,
    SPAWN_ENEMY,
    SPAWN_WEP,
    SPAWN_HEALTH,
    DOOR,
    KNIFE
}

enum eTILE_TYPE
{
    FLOOR = 0,
    WALL,
    STUFF_ON_FLOOR,
    NORMAL_FLOOR
}

enum eTILE_INFO
{
    TYPE = 0,
    U,
    V,
    OBJ,
    OBJ_X, // objcet offsets
    OBJ_Y
}

// Build the table of tiles' info from enum
global.TILE_INFO = -1;
global.TILE_INFO[eTILE.FLOOR]       = tileinfo_define(eTILE_TYPE.FLOOR, 0, 0, -1, 0, 0);
global.TILE_INFO[eTILE.WALL]        = tileinfo_define(eTILE_TYPE.WALL, 2, 4, oTileSolid, 0, 0);
global.TILE_INFO[eTILE.CEILING]     = tileinfo_define(eTILE_TYPE.FLOOR, 7, 4, -1, 0, 0);
global.TILE_INFO[eTILE.SPAWN_PLR]   = tileinfo_define(eTILE_TYPE.NORMAL_FLOOR, 1, 0, -1, 0, 0);
global.TILE_INFO[eTILE.SPAWN_ENEMY] = tileinfo_define(eTILE_TYPE.NORMAL_FLOOR, 1, 0, oEnemy, GFX_TILE_SIZE * 0.5, GFX_TILE_SIZE * 0.5);
global.TILE_INFO[eTILE.SPAWN_WEP]   = tileinfo_define(eTILE_TYPE.NORMAL_FLOOR, 1, 0, oWeaponPickup, GFX_TILE_SIZE * 0.5, GFX_TILE_SIZE * 0.5);
global.TILE_INFO[eTILE.SPAWN_HEALTH]= tileinfo_define(eTILE_TYPE.FLOOR, 5, 3, oHealthPickup, GFX_TILE_SIZE * 0.5, GFX_TILE_SIZE * 0.5);
global.TILE_INFO[eTILE.DOOR]        = tileinfo_define(eTILE_TYPE.FLOOR, 7, 3, oDoor, GFX_TILE_SIZE * 0.5, GFX_TILE_SIZE * 0.5);
global.TILE_INFO[eTILE.KNIFE]       = tileinfo_define(eTILE_TYPE.STUFF_ON_FLOOR, 9, 0, -1, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug : Test rooms definition
// The token table (air, wall, player spawn) and it's tile index
var _tokentable = makearray(".#pdewh", makearray(eTILE.FLOOR, eTILE.WALL, eTILE.SPAWN_PLR, eTILE.DOOR, eTILE.SPAWN_ENEMY, eTILE.SPAWN_WEP, eTILE.SPAWN_HEALTH));

// Test room : lobby
dataRoomBegin = makearray(
_tokentable,
"#################", // Actual tiles data begins here
"#####p##p##p#####",
"#...............#",
"#...............#",
"#.......w.......#",
"#...............#",
"#...............#",
"#...............#",
"########d########",
"#################"
);

// Test room #1
dataRoom1 = makearray(
_tokentable,
"#################", // Actual tiles data begins here
"#######d#########",
"#..............h#",
"#..####.........#",
"#..####..###.#..#",
"#.h......###e...#",
"#........#####..#",
"#..####....h....#",
"#.....#.........#",
"#.....#..#####..#",
"#.e.............#",
"#.......e.......#",
"############d####",
"#################"
);

// Test room #2
dataRoom2 = makearray(
_tokentable,
"#################",
"#######d#########",
"#...............#",
"#...##..........#",
"#...##...####.###",
"#........####.###",
"#e.......####.###",
"###########h....#",
"#######d###h....#",
"#######..#####..#",
"#######.........#",
"######d.........#",
"#################"
);

// Test room #3
dataRoom3 = makearray(
_tokentable,
"#####......",
"##d##......",
"#...#......",
"#...#......",
"#...#..####",
"#...#..#e.#",
"#...#..#..#",
"#...####..#",
"#....hh..e#",
"#.........#",
"#.........#",
"#.........#",
"#.........#",
"#.........#",
"##d##d##d##",
"###########"
);

// Test room #4
dataRoom4 = makearray(
_tokentable,
"#####################",
"#.h.....h.##d##.....#",
"#......e..#...#..e..#",
"#.........#...#.....#",
"#.........#...#.....#",
"#.........#...#.....#",
"#.........#...#.....#",
"#.........#.........#",
"##..##..###.........#",
"#.........#.........#",
"#...................#",
"#...................#",
"#.........#.........#",
"#.e.......#.........#",
"#.........##d##d##d##",
"#####################"
);

// Test room #5
dataRoom5 = makearray(
_tokentable,
"#####################",
"###d######..#########",
"#..................d#",
"###..#####..#########",
"#......###..##..e..##",
"#.h....###..##.....##",
"#####..###..##.....##",
"#####..###.........##",
"#e.....###..#########",
"#...........#########",
"#####################"
);

// Test room #6
dataRoom6 = makearray(
_tokentable,
"#####################",
"#...................#",
"#..#....#...#....#..#",
"#..#....#.e.#....#..#",
"#..#ehh.#...#.hhe#..#",
"#..###############..#",
"#..#######d#######..#",
"#...................#",
"#...................#",
"#...w.....w.....w...#",
"#...................#",
"#...................#",
"#...w.....w.....w...#",
"#...................#",
"#...................#",
"#...................#",
"##d###############d##",
"#####################"
);

// Make it into one list
dataRoomPool = ds_list_create();
ds_list_add(dataRoomPool, dataRoom1, dataRoom2, dataRoom3, dataRoom4, dataRoom5, dataRoom6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
